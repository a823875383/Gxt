apply plugin: 'com.android.application'
def cfg = rootProject.ext.configuration // 配置
def libs = rootProject.ext.libraries // 库
android {
    compileSdkVersion cfg.compileSdkVersion
    buildToolsVersion cfg.buildToolsVersion

    signingConfigs {
        release {
            Properties properties = new Properties()
            properties.load(project.rootProject.file('local.properties').newDataInputStream())
            storeFile file(properties.getProperty("RELEASE_STORE_FILE"))
            storePassword properties.getProperty("RELEASE_STORE_PASSWORD", "")
            keyAlias properties.getProperty("RELEASE_KEY_ALIA", "")
            keyPassword properties.get("RELEASE_KEY_PASSWORD", "")
        }
    }

    defaultConfig {
        applicationId cfg.package
        minSdkVersion cfg.minSdkVersion
        targetSdkVersion cfg.targetSdkVersion
        versionCode cfg.versionCode
        versionName cfg.versionName
        jackOptions {
            enabled true
        }

    }

    buildTypes {
        release {
            signingConfig signingConfigs.release
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            applicationVariants.all { variant ->
                variant.outputs.each { output ->
                    def outputFile = output.outputFile;
                    if (outputFile != null && outputFile.name.endsWith('.apk')) {
                        File outputDirectory = new File(outputFile.parent);
                        def fileName
                        if (variant.buildType.name == "release") {
                            fileName = "app_v${defaultConfig.versionName}_${packageTime()}.apk"
                        } else {
                            fileName = "app-debug.apk"
                        }
                        output.outputFile = new File(outputDirectory, fileName)
                    }
                }
            }

        }


        debug {
            signingConfig signingConfigs.release
            minifyEnabled false
            debuggable true
        }
    }
    packagingOptions {
        exclude 'META-INF/DEPENDENCIES.txt'
        exclude 'META-INF/NOTICE'
        exclude 'META-INF/NOTICE.txt'
        exclude 'META-INF/LICENSE'
        exclude 'META-INF/LICENSE.txt'
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    buildToolsVersion '25'
}

def packageTime() {
    return new Date().format("yyyyMMddHHmm", TimeZone.getTimeZone("GMT+8"))
}

dependencies {
    compile fileTree(include: ['*.jar'], dir: 'libs')
    compile "com.android.support:appcompat-v7:${libs.supportVersion}"
    compile "com.android.support:design:${libs.supportVersion}"
    compile "com.android.support:recyclerview-v7:${libs.supportVersion}"
    compile "com.android.support:support-v4:${libs.supportVersion}"
    compile project(':MyModule:Mycommon')
    compile "com.bigkoo:pickerview:${libs.pickerview}"
    compile "com.bigkoo:convenientbanner:${libs.banner}"
    compile "com.github.hotchemi:permissionsdispatcher:${libs.permissionsdispatcher}"

    testCompile 'junit:junit:4.12'
}
